import streamlit as st
import pandas as pd
import time
import pickle
import pandas as pd

col1, col2, col3 = st.columns([1,2,3])

col1.page_link("main.py", label="‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", icon="üè†")
col2.page_link("pages/about-heart-disease.py", label="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à", icon="1Ô∏è‚É£")
col3.page_link("pages/information.py", label="‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç", icon="2Ô∏è‚É£", disabled=False)

st.write("-----------------------------")
st.title('‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à')
    #progress_bar = st.progress(0)
st.subheader('‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤? ')
st.subheader('‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏î‡∏π !')

st.write('‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢:')
st.write('1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
st.write('2. ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡πà‡∏∏‡∏° "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢" ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢')

st.write('‡∏Ç‡∏≠‡∏¢‡πâ‡∏≥‡∏ß‡πà‡∏≤ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏î‡∏∏‡∏•‡∏¢‡∏û‡∏¥‡∏ô‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡πà‡∏≤‡∏ô')
#st.write('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡πâ‡∏≤‡∏°‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏•‡∏¥‡πâ‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÑ‡∏î‡πâ')

    #tab1, tab2 = st.tabs(["üóÉ User Input", "üìà Chart"])

    #$tab1.write('User Parameters')


    #function Input Parameters from User

def bins_bmi_calculate():
        weight = st.sidebar.number_input("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)", placeholder="", min_value=0, max_value=200)
        height = st.sidebar.number_input('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏°‡∏ï‡∏£)',min_value=0.0,max_value=2.5,value=1.5)
        bmi = (weight /( height * height));
        #print(bmi)
        label = ''
        if bmi < 18.5 :  label = '3'
        elif (bmi >= 18.5) & (bmi <= 22.90) : label = '0'
        elif (bmi >= 22.91) & (bmi <= 24.90) : label = '1'
        elif (bmi >= 24.91) & (bmi <= 29.90) : label = '2'
        elif bmi >= 29.91 :  label = '4'
        return label

def bins_sleepTime_calculate():
        sleeping = st.sidebar.number_input("‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏∑‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", placeholder="", min_value=1, max_value=24,value=8)
        #print(sleeping)
        labels = ''
        if sleeping > 10 : labels = '2'
        elif (sleeping >= 7) & (sleeping <= 10) : labels = '0'
        elif sleeping < 7 : labels = '1'
        return labels

def bins_ageCategory_calculate():
        ac = st.sidebar.selectbox('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)',('18 - 24','25 - 29','30 - 34','35 - 39','40 - 44','45 - 49','50 - 54','55 - 59','60 - 64','65 - 69','70 - 74','75 - 79','80 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ',))
        labelss = ''
        if ac == '18 - 24': labelss = '0'
        elif ac == '25 - 29': labelss = '1'
        elif ac == '30 - 34': labelss = '2'
        elif ac == '35 - 39': labelss = '3'
        elif ac == '40 - 44': labelss = '4'
        elif ac == '45 - 49': labelss = '5'
        elif ac == '50 - 54': labelss = '6'
        elif ac == '55 - 59': labelss = '7'
        elif ac == '60 - 64': labelss = '8'
        elif ac == '65 - 69': labelss = '9'
        elif ac == '70 - 74': labelss = '10'
        elif ac == '75 - 79': labelss = '11'
        elif ac == '80 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ': labelss = '12'
        return labelss

def bins_genHealth_calculate():
        gh = st.sidebar.selectbox('‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',('‡πÅ‡∏¢‡πà','‡∏õ‡∏Å‡∏ï‡∏¥','‡∏î‡∏µ','‡∏î‡∏µ‡∏°‡∏≤‡∏Å','‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°'))
        param = ''
        if gh == '‡πÅ‡∏¢‡πà': param = '0'
        elif gh == '‡∏õ‡∏Å‡∏ï‡∏¥': param = '1'
        elif gh == '‡∏î‡∏µ': param = '2'
        elif gh == '‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°': param = '3'
        elif gh == '‡∏î‡∏µ‡∏°‡∏≤‡∏Å': param = '4'
        return param

def user_input_feature():
        st.sidebar.image("images/heart-fav.png", width=100)
        #st.sidebar.title('‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á')
        st.sidebar.title('‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
        bmi_bins = bins_bmi_calculate()
        ##Bmi = st.sidebar.slider('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',0.0, 50.0, 25.0)
        Smoking = st.sidebar.selectbox('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 100 ‡∏°‡∏ß‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5 ‡∏ã‡∏≠‡∏á) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        AlcoholDrinking = st.sidebar.selectbox('‡∏Ñ‡∏∏‡∏ì‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 14 ‡πÅ‡∏Å‡πâ‡∏ß(‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢) ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 7 ‡πÅ‡∏Å‡πâ‡∏ß(‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á) ‡πÉ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        Stroke = st.sidebar.selectbox('‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        PhysicalHealth = st.sidebar.number_input('‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏µ? (‡∏ß‡∏±‡∏ô)',max_value=30,min_value=0)
        MentalHealth = st.sidebar.number_input('‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏µ? (‡∏ß‡∏±‡∏ô)',max_value=30,min_value=0)
        DiffWalking = st.sidebar.selectbox('‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        Sex = st.sidebar.selectbox('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏û‡∏®',('‡∏ä‡∏≤‡∏¢','‡∏´‡∏ç‡∏¥‡∏á',))
        AgeCategory = bins_ageCategory_calculate()
        Race = st.sidebar.selectbox('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥',('‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≤‡∏ß','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ú‡∏¥‡∏ß‡∏î‡∏≥','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢','‡∏ä‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏™‡πÄ‡∏õ‡∏ô','‡∏≠‡∏∑‡πà‡∏ô‡πÜ'))
        Diabetic = st.sidebar.selectbox('‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        PhysicalActivity = st.sidebar.selectbox('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        GenHealth = bins_genHealth_calculate()
        SleepTime = bins_sleepTime_calculate()
        Asthma = st.sidebar.selectbox('‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        KidneyDisease = st.sidebar.selectbox('‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        SkinCancer = st.sidebar.selectbox('‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',('‡πÑ‡∏°‡πà','‡πÉ‡∏ä‡πà',))
        data = {
                ##'Bmi' : Bmi,
                'Bmi' : bmi_bins,
                'Smoking' :  Smoking,
                'AlcoholDrinking' : AlcoholDrinking,
                'Stroke' : Stroke,
                'PhysicalHealth' : PhysicalHealth,
                'MentalHealth' : MentalHealth,
                'DiffWalking' : DiffWalking,
                'Sex' : Sex,
                'AgeCategory' : AgeCategory,
                'Race' : Race,
                'Diabetic' : Diabetic,
                'PhysicalActivity' : PhysicalActivity,
                'GenHealth' : GenHealth,
                'SleepTime' : SleepTime,
                'Asthma' : Asthma,
                'KidneyDisease' : KidneyDisease,
                'SkinCancer' : SkinCancer}
        features = pd.DataFrame(data, index=[0])
        return features

df = user_input_feature();
    #tab1.dataframe(df)

    #function translate user input parameters
def translate_user_input():
        translations = {'‡πÑ‡∏°‡πà': 'No', '‡πÉ‡∏ä‡πà': 'Yes','‡∏ä‡∏≤‡∏¢':'Male','‡∏´‡∏ç‡∏¥‡∏á': 'Female'}
        transRace = {'‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≤‡∏ß':'White','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ú‡∏¥‡∏ß‡∏î‡∏≥':'Black','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢':'Asian','‡∏ä‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô':'American Indian/Alaskan Native','‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏∏‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏™‡πÄ‡∏õ‡∏ô':'Hispanic','‡∏≠‡∏∑‡πà‡∏ô‡πÜ':'Other'}
        translateData ={
                        'Smoking' : df['Smoking'].map(translations),
                        'AlcoholDrinking' : df['AlcoholDrinking'].map(translations),
                        'Stroke' : df['Stroke'].map(translations),
                        'PhysicalHealth' : df['PhysicalHealth'],
                        'MentalHealth' : df['MentalHealth'],
                        'DiffWalking' : df['DiffWalking'].map(translations),
                        'Sex' : df['Sex'].map(translations),
                        'AgeCategory' : df['AgeCategory'],
                        'Race' : df['Race'].map(transRace),
                        'Diabetic' : df['Diabetic'].map(translations),
                        'PhysicalActivity' : df['PhysicalActivity'].map(translations),
                        'GenHealth' : df['GenHealth'],                 
                        'Asthma' : df['Asthma'].map(translations),
                        'KidneyDisease' : df['KidneyDisease'].map(translations),
                        'SkinCancer' : df['SkinCancer'].map(translations),
                        'BMICategory' : df['Bmi'],
                        'SleepTimeCategory' : df['SleepTime'],
        }
        new_df = pd.DataFrame(translateData, index=[0])
        return new_df

trans_df = translate_user_input()
    #tab1.write('Translated User Input Parameters'),
    #tab1.dataframe(trans_df)
df_preprocessed = trans_df

columns_to_encode = ['BMICategory', 'SleepTimeCategory', 'AgeCategory', 'GenHealth']

for column in columns_to_encode:
        df_preprocessed[column] = df_preprocessed[column].astype(float)


if 'clicked' not in st.session_state:
        st.session_state.clicked = False

def click_button():
        st.session_state.clicked = True
        run_progress_bar()

def run_progress_bar():
        #progress_text = "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
        #for perc_completed in range(100):
        #    time.sleep(0.03)
        #    progress_bar.progress(perc_completed+1, text=progress_text)

        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...'):
            time.sleep(2.5)
        
def check_NO():
        
        Smok = [0,0]
        Alc  = [0,0]
        Str  = [0,0]
        Dif  = [0,0]
        sex  = [0,0]
        Phy  = [0,0]
        Ast  = [0,0]
        Kid  = [0,0]
        Ski  = [0,0]
        race = [0,0,0,0,0,0]
        Dia  = [0,0]

        if df_preprocessed['Smoking'][0] == 'No': Smok[0] = 1
        else : Smok[1] = 1
        if df_preprocessed['AlcoholDrinking'][0] == 'No': Alc[0] = 1 
        else : Alc[1] = 1 
        if df_preprocessed['Stroke'][0] == 'No': Str[0] = 1 
        else : Str[1] = 1 
        if df_preprocessed['DiffWalking'][0] == 'No': Dif[0] = 1 
        else : Dif[1] = 1 
        if df_preprocessed['Sex'][0] == 'No': sex[0] = 1 
        else : sex[1] = 1 
        if df_preprocessed['PhysicalActivity'][0] == 'No': Phy[0] = 1 
        else : Phy[1] = 1 
        if df_preprocessed['Asthma'][0] == 'No': Ast[0] = 1 
        else : Ast[1] = 1 
        if df_preprocessed['KidneyDisease'][0] == 'No': Kid[0] = 1 
        else : Kid[1] = 1 
        if df_preprocessed['SkinCancer'][0] == 'No': Ski[0] = 1 
        else : Ski[1] = 1 
        if df_preprocessed['Diabetic'][0] == 'No': Dia[0] = 1 
        else : Dia[1] = 1 

        if df_preprocessed['Race'][0] == 'Race_American Indian/Alaskan Native': race[0] = 1 
        elif df_preprocessed['Race'][0] == 'Asian': race[1] = 1
        elif df_preprocessed['Race'][0] == 'Black': race[2] = 1
        elif df_preprocessed['Race'][0] == 'Hispanic': race[3] = 1
        elif df_preprocessed['Race'][0] == 'Other': race[4] = 1
        elif df_preprocessed['Race'][0] == 'White': race[5] = 1

        user_input = {
        'Smoking_No': Smok[0],
        'Smoking_Yes': Smok[1],
        'AlcoholDrinking_No': Alc[0],
        'AlcoholDrinking_Yes': Alc[1],
        'Stroke_No': Str[0],
        'Stroke_Yes': Str[1],
        'DiffWalking_No': Dif[0],
        'DiffWalking_Yes': Dif[1],
        'Sex_Female': sex[0],
        'Sex_Male': sex[1],
        'Race_American Indian/Alaskan Native': race[0],
        'Race_Asian': race[1],
        'Race_Black': race[2],
        'Race_Hispanic': race[3],
        'Race_Other': race[4],
        'Race_White': race[5],
        'Diabetic_No': Dia[0],
        'Diabetic_No, borderline diabetes': 0,
        'Diabetic_Yes': Dia[1],
        'Diabetic_Yes (during pregnancy)': 0,
        'PhysicalActivity_No': Phy[0],
        'PhysicalActivity_Yes': Phy[1],
        'Asthma_No': Ast[0],
        'Asthma_Yes': Ast[1],
        'KidneyDisease_No': Kid[0],
        'KidneyDisease_Yes': Kid[1],
        'SkinCancer_No': Ski[0],
        'SkinCancer_Yes': Ski[1],
        'PhysicalHealth': df_preprocessed['PhysicalHealth'][0],
        'MentalHealth':df_preprocessed['MentalHealth'][0],
        'AgeCategory': df_preprocessed['AgeCategory'][0],  # For example, corresponding to 30-39 years
        'GenHealth': df_preprocessed['GenHealth'][0],
        'BMICategory': df_preprocessed['BMICategory'][0],  # For example, corresponding to 23-24.9
        'SleepTimeCategory': df_preprocessed['SleepTimeCategory'][0]  # For example, corresponding to 7-9 hours
    }
        final_df = pd.DataFrame(user_input, index=[0])
        for column in final_df.columns:
            final_df[column] = final_df[column].astype(float)

        return final_df
        
pre_prediction = check_NO()
    #tab1.dataframe(pre_prediction)
    #print(pre_prediction.dtypes)
    #print(pre_prediction.head())

LOG_MODEL_PATH = 'best_model_logistic.pkl'
#LOG_MODEL_PATH = 'logistic_regression_model.pkl'

with open(LOG_MODEL_PATH, 'rb') as f:
        logistic_regression_model = pickle.load(f)

predictions = logistic_regression_model.predict_proba(pre_prediction)[:, 1]

    #st.write(predictions)

final_result = (predictions*100)
final_result_asfloat = final_result[0].astype(float)

col1 , col2 = st.columns([1, 2],gap="large")

with col1:
    submit = st.button(label='‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢', type="primary", on_click=click_button, help='‡∏Å‡∏î‡∏õ‡πà‡∏∏‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå')
    if submit:
        if final_result_asfloat < 50.0:
         st.markdown(
            f'<span style="color:green; font-size:24px;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ñ‡∏∑‡∏≠  {final_result_asfloat:.2f}  % ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ!</span>',
            unsafe_allow_html=True
         )
         st.image('images/good.jpg', width=350, caption='Dr. Heart Kub')
        else:
         st.markdown(
            f'<span style="color:red; font-size:24px;">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏Ñ‡∏∑‡∏≠  {final_result_asfloat:.2f}  % ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à</span>',
            unsafe_allow_html=True
         )
         st.image('images/bad.jfif', width=350, caption='Dr. Heart Kub')